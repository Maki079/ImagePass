@page "/checker"
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IConfiguration Configuration

<h3>Checker</h3>


<EditForm Model="@userInput" OnValidSubmit="@CheckCredencials">
    <InputText id="data" @bind-Value="userInput.DataToCheck" />
    <button class="bnt-generate" type="submit">Check your credencials</button>
</EditForm>

<style>
    .transparent-card {
        background-color: rgba(255, 255, 255, 0); 
        border: none;
    }

    .logo-frame {
        width: 100%; 
        height: 150px; 
        display: flex;
        justify-content: center;
        align-items: center;
        border: 1px solid #ddd;
        overflow: hidden;
    }

    .logo-frame img {
        max-height: 100px; 
        max-width: 100%; 
        object-fit: contain; 
    }
</style>

@if (breaches != null && breaches.Count > 0)
{
    <div class="row">
        @foreach (var breach in breaches)
        {
            <div class="col-sm-6 col-md-4 col-lg-3 mb-3">
                <div class="card transparent-card h-100">
                    <div class="logo-frame">
                        <img src="@breach.LogoPath" alt="Breach Logo">
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@breach.Title</h5>
                        <p class="card-text">@((MarkupString)breach.Description).Value</p>
                        <ul class="list-group list-group-flush">
                            <li class="transparent-card">Breach Date: @breach.BreachDate.ToShortDateString()</li>
                            <li class="transparent-card">Data Exposed: @string.Join(", ", breach.DataClasses)</li>
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p><em>@userResponse</em></p>
}

@code {
    private UserInput userInput = new UserInput();
    private string apiUrl;
    private List<Breach> breaches;
    private string userResponse = "";

    protected override void OnInitialized()
    {
        apiUrl = Configuration["ApiSettings:ImagePassBaseUrl"];
    }

    private async Task CheckCredencials()
    {

        breaches = null;
        userResponse = "";

        var response = await Http.GetAsync(apiUrl + "/Checker/" + userInput.DataToCheck);

        if (response.IsSuccessStatusCode)
        {
            var jsonData = await response.Content.ReadAsStringAsync();
            breaches = JsonSerializer.Deserialize<List<Breach>>(jsonData);
            if (breaches == null || breaches.Count == 0)
            {
                userResponse = "No breaches found for the provided credentials.";
            }
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            userResponse = "Not found in any breaches!";
        }
        else
        {
            userResponse = "Failed to retrieve data. Please try again.";
        }
    }

    public class UserInput
    {
        public string DataToCheck { get; set; }
    }
    public class Breach
    {
        public string Name { get; set; }
        public string Title { get; set; }
        public string Domain { get; set; }
        public DateTime BreachDate { get; set; }
        public DateTime AddedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
        public long PwnCount { get; set; }
        public string Description { get; set; }
        public string LogoPath { get; set; }
        public List<string> DataClasses { get; set; }
        public bool IsVerified { get; set; }
        public bool IsFabricated { get; set; }
        public bool IsSensitive { get; set; }
        public bool IsRetired { get; set; }
        public bool IsSpamList { get; set; }
        public bool IsMalware { get; set; }
        public bool IsSubscriptionFree { get; set; }
    }

}
